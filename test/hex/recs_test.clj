(ns hex.recs-test
  "Test data
  Cube.
  |-----|-----|-----|-----|-----|---
  |-1,-2| 0,-2| 1,-2| 2,-2| 3,-2|
  |     |     |     |     |     |
  |  3  |  2  |  1  |  0  | -1  |
  ---|-----|-----|-----|-----|-----|
     |-1,-1| 0,-1| 1,-1| 2,-1| 3,-1|
     |     |     |     |     |     |
     |  2  |  1  |  0  | -1  | -2  |
  |-----|-----|-----|-----|-----|---
  |-2,0 |-1,0 | x,z | 1,0 | 2,0 |
  |     |     |     |     |     |
  | +2  | +1  |  y  | -1  | -2  |
  ---|-----|-----|-----|-----|-----|
     |-2,1 |-1,1 | 0,1 | 1,1 | 2,1 |
     |     |     |     |     |     |
     | +1  |  0  | -1  | -2  | -3  |
  |-----|-----|-----|-----|-----|---
  |-3,2 |-2,2 |-1,2 | 0,2 | 1,2 |
  |     |     |     |     |     |
  |  1  |  0  | -1  | -2  | -3  |
  ---|-----|-----|-----|-----|-----|

  * Axis record coordinates.
  -r
   ＼
  ---*--- +q
      ＼
  |-----|-----|-----|-----|-----|---
  |     | 0,-2| 1,-2|     |     |
  |     |     |     |     |     |
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|-----|
     |-1,-1| 0,-1| 1,-1|     |     |
     |     |     |     |     |     |
     |     |     |     |     |     |
  |-----|-----|-----|-----|-----|---
  |-2,0 |-1,0 | q,r | 1,0 | 2,0 |
  |     |     |     |     |     |
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|-----|
     |     |-1,1 | 0,1 |     |     |
     |     |     |     |     |     |
     |     |     |     |     |     |
  |-----|-----|-----|-----|-----|---
  |     |     |     | 0,2 |     |
  |     |     |     |     |     |
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|-----|
  * Cell coordinates as offset.
                cy (indicated dot cx = 0)
                 ↓
  |-----|-----|-----|-----|-----|---
  |     |     |  .  |     |     |
  |-2,-2|-1,-2| 0,-2| 1,-2| 2,-2|
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|-----|
     |     |     |  .  |     |     |
     |     |-1,-1| 0,-1|     |     |
     |     |     |     |     |     |
  |-----|-----|-----|-----|-----|---
  |     |     |  .  |     |     |
  |-2,0 |-1,0 |cx,cy| 1,0 |2,0  |   ->cx
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|-----|
     |     |     |  .  |     |     |
     |     |-1,1 | 0,1 | 1,1 | 2,1 |
     |     |     |     |     |     |
   -----|-----|-----|-----|-----|---
  |     |     |  .  |     |     |
  |     |-1,2 | 0,2 | 1,2 |     |
  |     |     |     |     |     |
  ---|-----|-----|-----|-----|---

  test map: O(0,0), * obstacle , P1 P2 P3 start , G goal, F fail goal, number is path
  cy                       test map                                                     test map coord(Cell cx)                 cy
  ↓ --+---+---+---+---+---+---+---+---+---+---+---+---+---+---+    --+---+---+---+---+---+---+---+---+---+---+---+---+---+----   ↓
  0 O |   |   |   |   |   | 3 |1,3|1,3| G |   |   |   |   |   |    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e     0
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  1 |   |   |   |   |   | 3 | 1 |   |   | 2 |   |   |   |   |      | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e   1
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  2   |   |   |   |   | 3 |P1 |   |   |   | 2 |   |   |   |   |    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e     2
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  3 | * | * | * |   | 3 | * | * | * | * | * | 2 |   |   |   |      | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e   3
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  4 * |   |P3 | * | 3 |   |   |   |   | 2 | 2 |   |   |   |   |    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e     4
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  5 | * | 3 | * | 3 |   |   |   |   | P2|   |   |   | * | * |      | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e   5
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  6 * |   | 3 | 3 |   |   |   |   |   |   |   |   | * | F | * |    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e     6
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  7 | * |   |   |   |   |   |   |   |   |   |   |   | * | * |      | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e   7
    --+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--
  9 * |   |   |   |   |   |   |   |   |   |   |   |   |   |   |    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e     8
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--


  P1        (6,2)
  P2        (8,5)
  P3        (2,4)
  G         (a,0)
  F         (d,6)
  Obstacles (0,3) (1,3) (2,3)        (5,3) (6,3) (7,3) (8,3) (9,3)
         (0,4)   (3,4)
           (0,5)    (2,5)                                                (c,5) (d,5)
         (0,6)                                                          (c,6)...(e,6)
           (0,7)                                                         (c,7) (d,7)
         (0,8)"
  (:require [clojure.test :refer :all]
            [hex.recs :refer :all])
  (:import  [hex.recs Cell Axis Cube]))

(defn- c [x y] (cell->cube (Cell. x y)))
(def P1 (c 6 2))
(def P2 (c 8,5))
(def P3 (c 2,4))
(def G  (c 0x9,0))
(def F  (c 0xd,6))
(def obstacle #{(c 0,3) (c 1,3) (c 2,3)           (c 5,3) (c 6,3) (c 7,3) (c 8,3) (c 9,3) 
                (c 0,4)   (c 3,4)
                (c 0,5)     (c 2,5)                                                 (c 0xc,5) (c 0xd,5)
                (c 0,6)                                                           (c 0xc,6)     (c 0xe,6)
                (c 0,7)                                                             (c 0xc,7) (c 0xd 7)
                (c 0,8)})

(def Cube-around-origin
  [(Cube. 1 -1 0)
   (Cube. 1 0 -1)
   (Cube. 0 1 -1)
   (Cube. -1 1 0)
   (Cube. -1 0 1)
   (Cube. 0 -1 1)])

(def Cell-around-origin
  [(Cell. 1 0)
   (Cell. 0 -1)
   (Cell. -1 -1)
   (Cell. -1 0)
   (Cell. -1 1)
   (Cell. 0 1)])

(def Axis-around-origin
  [(Axis. 1 0)
   (Axis. 1 -1)
   (Axis. 0 -1)
   (Axis. -1 0)
   (Axis. -1 1)
   (Axis. 0 1)])

(deftest conversion-test
  (testing "some sample cell->cube and cube->cell conversion"
    (are [n] (= (nth Cube-around-origin n) (cell->cube (nth Cell-around-origin n)))
      0 1 2 3 4 5)
    (are [n] (= (nth Cell-around-origin n) (cube->cell (nth Cube-around-origin n)))
      0 1 2 3 4 5))
  (testing "some sample axis->cube and cube->axis conversion"
    (are [n] (= (nth Cube-around-origin n) (axis->cube (nth Axis-around-origin n)))
      0 1 2 3 4 5)
    (are [n] (= (nth Axis-around-origin n) (cube->axis (nth Cube-around-origin n)))
      0 1 2 3 4 5)))

(deftest line-to-test
  (testing "0,0 line-to 3,4 -> [0,0 0,1 1,2 2,2 2,3 3,4]"
    (is (= (line-to (cell->cube (Cell. 0 0)) (cell->cube (Cell. 3 4)))
           (mapv cell->cube [(Cell. 0 0)           ;| 0,0*|
                             (Cell. 0 1)           ;   | 0,1*|
                             (Cell. 1 2)           ;|     | 1,2*| 2,2*|
                             (Cell. 2 2)           ;   |     |     | 2,3*|
                             (Cell. 2 3)           ;|     |     |     | 3,4*|
                             (Cell. 3 4)])))))     ;

(deftest path-finding-test
  (testing "There is no pathway from P1,P2,P3 to F"
    (is (nil? (path-finding P1 F obstacle {} 100)))
    (is (nil? (path-finding P2 F obstacle {} 100)))
    (is (nil? (path-finding P3 F obstacle {} 100))))
  ;;; picked up docstring map
  (testing "P1 path"
    (is (= (path-graph->cubevec (path-finding P1 G obstacle {}) G)
           (list (c 6 2) (c 6 1) (c 7 0) (c 8 0) (c 9 0)))))
  (testing "P2 path"
    (is (= (path-graph->cubevec (path-finding P2 G obstacle {}) G)
           (list (c 8 5) (c 9 4) (c 10 4) (c 10 3) (c 10 2) (c 9 1) (c 9 0)))))
  (testing "P3 path"
    (is (= (path-graph->cubevec (path-finding P3 G obstacle {}) G)
           (list (c 2 4) (c 1 5) (c 2 6) (c 3 6) (c 3 5) (c 4 4) (c 4 3) (c 5 2) (c 5 1) (c 6 0) (c 7 0) (c 8 0) (c 9 0))))))

